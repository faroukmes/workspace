ALGORITHM SumDistinctElements(set1, set2)
    INPUT: Two arrays set1 and set2
    OUTPUT: Sum of distinct elements present in either set

    sum ← 0

    // Check elements in set1 not present in set2
    FOR i FROM 0 TO length(set1) - 1 DO
        isDistinct ← TRUE
        FOR j FROM 0 TO length(set2) - 1 DO
            IF set1[i] = set2[j] THEN
                isDistinct ← FALSE
                BREAK
            END IF
        END FOR

        IF isDistinct = TRUE THEN
            sum ← sum + set1[i]
        END IF
    END FOR

    // Check elements in set2 not present in set1
    FOR i FROM 0 TO length(set2) - 1 DO
        isDistinct ← TRUE
        FOR j FROM 0 TO length(set1) - 1 DO
            IF set2[i] = set1[j] THEN
                isDistinct ← FALSE
                BREAK
            END IF
        END FOR

        IF isDistinct = TRUE THEN
            sum ← sum + set2[i]
        END IF
    END FOR

    RETURN sum
END ALGORITHM

problem 2:
ALGORITHM DotProductProcedure(v1, v2, ps)
    INPUT: Two vectors v1 and v2, result parameter ps (passed by reference)
    OUTPUT: Dot product stored in ps[0] (or error if dimensions mismatch)

    IF length(v1) ≠ length(v2) THEN
        ps[0] ← NULL
        RETURN
    END IF

    product ← 0
    FOR i FROM 0 TO length(v1) - 1 DO
        product ← product + (v1[i] * v2[i])
    END FOR

    ps[0] ← product
END ALGORITHM

ALGORITHM CheckOrthogonality(vectors_pairs)
    INPUT: List of vector pairs [(v1, v2), ...]
    OUTPUT: Prints whether each pair is orthogonal

    FOR EACH (v1, v2) IN vectors_pairs DO
        ps ← [0] // Initialize result storage
        DotProductProcedure(v1, v2, ps)

        IF ps[0] = NULL THEN
            PRINT "Vectors have different dimensions"
        ELSE IF ps[0] = 0 THEN
            PRINT "Vectors are orthogonal"
        ELSE
            PRINT "Vectors are not orthogonal"
        END IF
    END FOR
END ALGORITHM

using funtion:
ALGORITHM DotProductFunction(v1, v2)
    INPUT: Two vectors v1 and v2
    OUTPUT: Dot product (or NULL if dimensions mismatch)

    IF length(v1) ≠ length(v2) THEN
        RETURN NULL
    END IF

    product ← 0
    FOR i FROM 0 TO length(v1) - 1 DO
        product ← product + (v1[i] * v2[i])
    END FOR

    RETURN product
END ALGORITHM

ALGORITHM CheckOrthogonality(vectors_pairs)
    INPUT: List of vector pairs [(v1, v2), ...]
    OUTPUT: Prints whether each pair is orthogonal

    FOR EACH (v1, v2) IN vectors_pairs DO
        product ← DotProductFunction(v1, v2)

        IF product = NULL THEN
            PRINT "Vectors have different dimensions"
        ELSE IF product = 0 THEN
            PRINT "Vectors are orthogonal"
        ELSE
            PRINT "Vectors are not orthogonal"
        END IF
    END FOR
END ALGORITHM